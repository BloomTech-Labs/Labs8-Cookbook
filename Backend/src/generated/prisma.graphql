type AggregateIngredient {
  count: Int!
}

type AggregateInstruction {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateSubscription {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Ingredient {
  id: ID!
  name: String!
  amount: Float!
  unit: String!
  recipe: Recipe!
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  name: String!
  amount: Float!
  unit: String!
  recipe: RecipeCreateOneInput!
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  unit_ASC
  unit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input IngredientUpdateInput {
  name: String
  amount: Float
  unit: String
  recipe: RecipeUpdateOneRequiredInput
}

input IngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  recipe: RecipeWhereInput
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
}

type Instruction {
  id: ID!
  stepNum: Int!
  description: String!
  isComplete: Boolean
  recipe: Recipe!
}

type InstructionConnection {
  pageInfo: PageInfo!
  edges: [InstructionEdge]!
  aggregate: AggregateInstruction!
}

input InstructionCreateInput {
  stepNum: Int!
  description: String!
  isComplete: Boolean
  recipe: RecipeCreateOneWithoutInstructionsInput!
}

input InstructionCreateManyWithoutRecipeInput {
  create: [InstructionCreateWithoutRecipeInput!]
  connect: [InstructionWhereUniqueInput!]
}

input InstructionCreateWithoutRecipeInput {
  stepNum: Int!
  description: String!
  isComplete: Boolean
}

type InstructionEdge {
  node: Instruction!
  cursor: String!
}

enum InstructionOrderByInput {
  id_ASC
  id_DESC
  stepNum_ASC
  stepNum_DESC
  description_ASC
  description_DESC
  isComplete_ASC
  isComplete_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InstructionUpdateInput {
  stepNum: Int
  description: String
  isComplete: Boolean
  recipe: RecipeUpdateOneRequiredWithoutInstructionsInput
}

input InstructionUpdateManyWithoutRecipeInput {
  create: [InstructionCreateWithoutRecipeInput!]
  delete: [InstructionWhereUniqueInput!]
  connect: [InstructionWhereUniqueInput!]
  disconnect: [InstructionWhereUniqueInput!]
  update: [InstructionUpdateWithWhereUniqueWithoutRecipeInput!]
  upsert: [InstructionUpsertWithWhereUniqueWithoutRecipeInput!]
}

input InstructionUpdateWithoutRecipeDataInput {
  stepNum: Int
  description: String
  isComplete: Boolean
}

input InstructionUpdateWithWhereUniqueWithoutRecipeInput {
  where: InstructionWhereUniqueInput!
  data: InstructionUpdateWithoutRecipeDataInput!
}

input InstructionUpsertWithWhereUniqueWithoutRecipeInput {
  where: InstructionWhereUniqueInput!
  update: InstructionUpdateWithoutRecipeDataInput!
  create: InstructionCreateWithoutRecipeInput!
}

input InstructionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stepNum: Int
  stepNum_not: Int
  stepNum_in: [Int!]
  stepNum_not_in: [Int!]
  stepNum_lt: Int
  stepNum_lte: Int
  stepNum_gt: Int
  stepNum_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isComplete: Boolean
  isComplete_not: Boolean
  recipe: RecipeWhereInput
  AND: [InstructionWhereInput!]
  OR: [InstructionWhereInput!]
  NOT: [InstructionWhereInput!]
}

input InstructionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateManyIngredients(data: IngredientUpdateInput!, where: IngredientWhereInput): BatchPayload!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  createInstruction(data: InstructionCreateInput!): Instruction!
  updateInstruction(data: InstructionUpdateInput!, where: InstructionWhereUniqueInput!): Instruction
  updateManyInstructions(data: InstructionUpdateInput!, where: InstructionWhereInput): BatchPayload!
  upsertInstruction(where: InstructionWhereUniqueInput!, create: InstructionCreateInput!, update: InstructionUpdateInput!): Instruction!
  deleteInstruction(where: InstructionWhereUniqueInput!): Instruction
  deleteManyInstructions(where: InstructionWhereInput): BatchPayload!
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateManyRecipes(data: RecipeUpdateInput!, where: RecipeWhereInput): BatchPayload!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  updateSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateManySubscriptions(data: SubscriptionUpdateInput!, where: SubscriptionWhereInput): BatchPayload!
  upsertSubscription(where: SubscriptionWhereUniqueInput!, create: SubscriptionCreateInput!, update: SubscriptionUpdateInput!): Subscription!
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteManySubscriptions(where: SubscriptionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  instruction(where: InstructionWhereUniqueInput!): Instruction
  instructions(where: InstructionWhereInput, orderBy: InstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instruction]!
  instructionsConnection(where: InstructionWhereInput, orderBy: InstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstructionConnection!
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptions(where: SubscriptionWhereInput, orderBy: SubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscription]!
  subscriptionsConnection(where: SubscriptionWhereInput, orderBy: SubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubscriptionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Recipe {
  id: ID!
  title: String!
  readyInMinutes: Int!
  servings: Int!
  image: String!
  createdBy: User!
  instructions(where: InstructionWhereInput, orderBy: InstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instruction!]
}

type RecipeConnection {
  pageInfo: PageInfo!
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreateInput {
  title: String!
  readyInMinutes: Int!
  servings: Int!
  image: String!
  createdBy: UserCreateOneWithoutRecipesInput!
  instructions: InstructionCreateManyWithoutRecipeInput
}

input RecipeCreateManyWithoutCreatedByInput {
  create: [RecipeCreateWithoutCreatedByInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateOneInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateOneWithoutInstructionsInput {
  create: RecipeCreateWithoutInstructionsInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutCreatedByInput {
  title: String!
  readyInMinutes: Int!
  servings: Int!
  image: String!
  instructions: InstructionCreateManyWithoutRecipeInput
}

input RecipeCreateWithoutInstructionsInput {
  title: String!
  readyInMinutes: Int!
  servings: Int!
  image: String!
  createdBy: UserCreateOneWithoutRecipesInput!
}

type RecipeEdge {
  node: Recipe!
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  readyInMinutes_ASC
  readyInMinutes_DESC
  servings_ASC
  servings_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RecipeUpdateDataInput {
  title: String
  readyInMinutes: Int
  servings: Int
  image: String
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
  instructions: InstructionUpdateManyWithoutRecipeInput
}

input RecipeUpdateInput {
  title: String
  readyInMinutes: Int
  servings: Int
  image: String
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
  instructions: InstructionUpdateManyWithoutRecipeInput
}

input RecipeUpdateManyWithoutCreatedByInput {
  create: [RecipeCreateWithoutCreatedByInput!]
  delete: [RecipeWhereUniqueInput!]
  connect: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input RecipeUpdateOneRequiredInput {
  create: RecipeCreateInput
  update: RecipeUpdateDataInput
  upsert: RecipeUpsertNestedInput
  connect: RecipeWhereUniqueInput
}

input RecipeUpdateOneRequiredWithoutInstructionsInput {
  create: RecipeCreateWithoutInstructionsInput
  update: RecipeUpdateWithoutInstructionsDataInput
  upsert: RecipeUpsertWithoutInstructionsInput
  connect: RecipeWhereUniqueInput
}

input RecipeUpdateWithoutCreatedByDataInput {
  title: String
  readyInMinutes: Int
  servings: Int
  image: String
  instructions: InstructionUpdateManyWithoutRecipeInput
}

input RecipeUpdateWithoutInstructionsDataInput {
  title: String
  readyInMinutes: Int
  servings: Int
  image: String
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
}

input RecipeUpdateWithWhereUniqueWithoutCreatedByInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateWithoutCreatedByDataInput!
}

input RecipeUpsertNestedInput {
  update: RecipeUpdateDataInput!
  create: RecipeCreateInput!
}

input RecipeUpsertWithoutInstructionsInput {
  update: RecipeUpdateWithoutInstructionsDataInput!
  create: RecipeCreateWithoutInstructionsInput!
}

input RecipeUpsertWithWhereUniqueWithoutCreatedByInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateWithoutCreatedByDataInput!
  create: RecipeCreateWithoutCreatedByInput!
}

input RecipeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  readyInMinutes: Int
  readyInMinutes_not: Int
  readyInMinutes_in: [Int!]
  readyInMinutes_not_in: [Int!]
  readyInMinutes_lt: Int
  readyInMinutes_lte: Int
  readyInMinutes_gt: Int
  readyInMinutes_gte: Int
  servings: Int
  servings_not: Int
  servings_in: [Int!]
  servings_not_in: [Int!]
  servings_lt: Int
  servings_lte: Int
  servings_gt: Int
  servings_gte: Int
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdBy: UserWhereInput
  instructions_every: InstructionWhereInput
  instructions_some: InstructionWhereInput
  instructions_none: InstructionWhereInput
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  id: ID!
  type: String!
  amount: Int!
  user: User!
  charge: String!
}

type SubscriptionConnection {
  pageInfo: PageInfo!
  edges: [SubscriptionEdge]!
  aggregate: AggregateSubscription!
}

input SubscriptionCreateInput {
  type: String!
  amount: Int!
  user: UserCreateOneInput!
  charge: String!
}

type SubscriptionEdge {
  node: Subscription!
  cursor: String!
}

enum SubscriptionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  amount_ASC
  amount_DESC
  charge_ASC
  charge_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SubscriptionUpdateInput {
  type: String
  amount: Int
  user: UserUpdateOneRequiredInput
  charge: String
}

input SubscriptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  user: UserWhereInput
  charge: String
  charge_not: String
  charge_in: [String!]
  charge_not_in: [String!]
  charge_lt: String
  charge_lte: String
  charge_gt: String
  charge_gte: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
}

input SubscriptionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  username: String!
  password: String!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  first_name: String!
  last_name: String!
  email: String!
  username: String!
  password: String!
  recipes: RecipeCreateManyWithoutCreatedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRecipesInput {
  first_name: String!
  last_name: String!
  email: String!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateDataInput {
  first_name: String
  last_name: String
  email: String
  username: String
  password: String
  recipes: RecipeUpdateManyWithoutCreatedByInput
}

input UserUpdateInput {
  first_name: String
  last_name: String
  email: String
  username: String
  password: String
  recipes: RecipeUpdateManyWithoutCreatedByInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutRecipesDataInput {
  first_name: String
  last_name: String
  email: String
  username: String
  password: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput!
  create: UserCreateWithoutRecipesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}

